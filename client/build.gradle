group 'htwdd/chessgame'
version '1.0.0'

buildscript {
    ext.kotlin_version = '1.2.30'
    ext.requirejs_version = '2.3.5'
    ext.kotlinx_html_version = '0.6.6'
    ext.sass_version = '1.2.2'
    ext.serialization_version = '0.4.2'
    ext.coroutines_version = '0.22.5'

    repositories {
        mavenCentral()
        jcenter()
        maven { url "https://plugins.gradle.org/m2/" }
        maven { url "https://kotlin.bintray.com/kotlinx" }
    }
    dependencies {
        classpath "org.jetbrains.kotlin:kotlin-gradle-plugin:$kotlin_version"
        classpath "com.github.fgiannesini.libsass.gradle.plugin:libsass-gradle-plugin:+"
        classpath "org.jetbrains.kotlinx:kotlinx-gradle-serialization-plugin:$serialization_version"
    }
}

apply plugin: 'kotlin2js'
apply plugin: 'com.github.fgiannesini.libsass.gradle.plugin'
apply plugin: 'kotlinx-serialization'

repositories {
    mavenCentral()
    jcenter()
    maven { url "https://kotlin.bintray.com/kotlinx" }
}

dependencies {
    compile "org.jetbrains.kotlin:kotlin-stdlib-js:$kotlin_version"
    compile "org.webjars:requirejs:$requirejs_version"
    compile "org.jetbrains.kotlinx:kotlinx-html-js:$kotlinx_html_version"
    compile "org.jetbrains.kotlinx:kotlinx-serialization-runtime-js:$serialization_version"
    compile "org.jetbrains.kotlinx:kotlinx-coroutines-core-js:$coroutines_version"
    compile "org.jetbrains.kotlin:kotlin-test-js:$kotlin_version"
}

jar {
    baseName = 'chessgame-client'
    version = '1.0.0'
    configurations.compile.each {File file ->
        from (zipTree(file.absolutePath))
        exclude { fileTreeElement ->
            def path = fileTreeElement.path
            path.endsWith("_metadata") || path.endsWith(".kjsm") || path.endsWith(".properties") || path.endsWith("pom.xml") || path.endsWith("_module") || path.startsWith("kotlin-test")
        }
    }
    from ("dist/css/") {
        exclude { fileTreeElement ->
            fileTreeElement.path.endsWith(".css.map")
        }
    }
    eachFile { details ->
        if (details.path.startsWith("fonts") ||
                details.path.startsWith("icon") ||
                details.path.startsWith("image") ||
                details.path.startsWith("config") ||
                details.path.startsWith("index.html")
        ) {
            details.path = 'static/' + details.path
        }
        if (details.path.endsWith(".css")) {
            details.path = 'static/css/' + details.path
        }
        if (details.path.startsWith("client.")) {
            details.path = 'static/js/' + details.path
        }
        if (!details.path.startsWith("static/js/client.") && (details.path.endsWith(".js") || details.path.endsWith(".js.map"))){
            if (details.path.startsWith("META-INF")) details.path = details.path.replaceFirst(/.*\//, '')
            details.path = 'static/js/lib/' + details.path
        }
    }
    includeEmptyDirs = false
}

jar.dependsOn(compileLibSass)
jar.dependsOn(compileLibSassProduction)

kotlin {
    experimental {
        coroutines 'enable'
    }
}

[compileKotlin2Js, compileTestKotlin2Js]*.configure {
    kotlinOptions {
        moduleKind = "amd"
        sourceMap = true
        sourceMapEmbedSources = "always"
    }
}

libSassParameters {
    inputFilePath = "$projectDir/src/main/sass/main.scss"
    outputFilePath = "$projectDir/dist/css/main.css"
    watchedDirectoryPath = "$projectDir/src/main/sass"
    sourceMapEmbed = true
    sourceMapFilePath "$projectDir/dist/css/main.css.map"

    //Override parameters for task "compileLibSassProduction"
    libSassProductionParameters {
        outputStyle "compressed"
        outputFilePath = "$projectDir/dist/css/main.min.css"
    }
}

build.doLast {
    configurations.compile.each { File file ->
        copy {
            includeEmptyDirs = false

            from zipTree(file.absolutePath)
            into "${projectDir}/dist/js/lib"
            include { fileTreeElement ->
                def path = fileTreeElement.path
                path.endsWith(".js") && (path.startsWith("META-INF/resources/") || !path.startsWith("META-INF/"))
            }
            eachFile { fcp ->
                fcp.path = fcp.path.replaceFirst(/.*\//, '')
            }
        }
    }

    copy {
        from "$buildDir/classes/kotlin/main/"
        into "${projectDir}/dist/js/"
        include '*.js'
        include '*.js.map'
    }

    copy {
        from "$buildDir/classes/kotlin/test/"
        into "${projectDir}/dist/js/test"
        include '*.js'
        include '*.js.map'
    }

    copy {
        includeEmptyDirs = false
        from new File("$buildDir/resources/main")
        into "dist"
    }

    copy {
        includeEmptyDirs = false
        from new File("$buildDir/resources/test")
        into "dist/js/test"
    }
}

task release(type: Copy) {
    configurations.compile.each { File file ->
        copy {
            includeEmptyDirs = false

            from zipTree(file.absolutePath)
            into "${projectDir}/dist/js/lib"
            include { fileTreeElement ->
                def path = fileTreeElement.path
                path.endsWith(".js") && (path.startsWith("META-INF/resources/") || !path.startsWith("META-INF/"))
            }
            eachFile { fcp ->
                fcp.path = fcp.path.replaceFirst(/.*\//, '')
            }
        }
    }

    copy {
        from "$buildDir/classes/kotlin/main/"
        into "${projectDir}/dist/js/"
        include '*.js'
        include '*.js.map'
    }

    copy {
        from "$buildDir/classes/kotlin/test/"
        into "${projectDir}/dist/js/test"
        include '*.js'
        include '*.js.map'
    }

    copy {
        includeEmptyDirs = false
        from new File("$buildDir/resources/main")
        into "dist"
    }

    copy {
        includeEmptyDirs = false
        from new File("$buildDir/resources/test")
        into "dist/js/test"
    }
}
configure(release) {
    group = 'release'
}

release.dependsOn(compileLibSass)
release.dependsOn(compileLibSassProduction)

task releaseClean(type: Delete) {
    delete "dist"
}
configure(releaseClean) {
    group = 'release'
}

clean.finalizedBy(releaseClean)